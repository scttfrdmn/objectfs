# ObjectFS Security-Only CI Pipeline
# Solo development focused - comprehensive local checks via pre-commit hooks
# CI only handles security scanning and releases

name: Security & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  schedule:
    # Weekly security scans
    - cron: '0 2 * * 1'

env:
  GO_VERSION: '1.21'

jobs:
  # Security scanning (always run)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'

    - name: Upload Gosec SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

    - name: Run Trivy vulnerability scanner (repo)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-repo.sarif'

    - name: Upload Trivy repo scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-repo.sarif'

    - name: Check for vulnerable dependencies
      run: |
        echo "🔍 Checking for vulnerable dependencies..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: License compliance check
      run: |
        echo "📄 Checking license compliance..."
        go install github.com/google/go-licenses@latest
        go-licenses check ./...

  # Build only for releases or main branch pushes
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    needs: security
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="objectfs-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build -ldflags="-s -w" -o "dist/${BINARY_NAME}" ./cmd/objectfs
        
        # Create checksum
        cd dist
        shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: objectfs-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/*

  # Docker build for releases
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs: security
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/objectfs
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ startsWith(github.ref, 'refs/tags/') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy security scan on Docker image
      if: startsWith(github.ref, 'refs/tags/')
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository_owner }}/objectfs:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-docker.sarif'

    - name: Upload Docker Trivy scan results
      if: startsWith(github.ref, 'refs/tags/')
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-docker.sarif'

  # Release creation (only for tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [security, build, docker]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find ./artifacts -name "objectfs-*" -type f | while read file; do
          cp "$file" release/
        done
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}