# ObjectFS Pre-commit Configuration
# Solo development focused - comprehensive checks before commits
# Replaces CI/CD for local development workflow

repos:
  # General file formatting and checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--multi]
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: [--fix=lf]

  # Go-specific hooks
  - repo: https://github.com/tekwizely/pre-commit-golang
    rev: v1.0.0-rc.1
    hooks:
      # Go formatting
      - id: go-fmt
        args: [-w]
      - id: go-imports
        args: [-w]
      
      # Go linting and validation
      - id: go-vet-pkg
      - id: go-mod-tidy
      - id: go-unit-tests
        args: [-timeout=10m, -race, -coverprofile=coverage.out]
      
      # Security and vulnerability checks
      - id: go-sec-pkg
        args: [./...]
      - id: golangci-lint
        args: [run, --timeout=5m]

  # Additional Go tooling
  - repo: local
    hooks:
      # Custom Go build verification
      - id: go-build-check
        name: Go Build Check
        entry: sh -c 'go build ./...'
        language: system
        files: \.go$
        pass_filenames: false

      # Go mod verification
      - id: go-mod-verify
        name: Go Mod Verify
        entry: sh -c 'go mod verify'
        language: system
        files: (go\.mod|go\.sum)$
        pass_filenames: false

      # Comprehensive test suite (replaces CI)
      - id: full-test-suite
        name: Full Test Suite
        entry: sh -c 'echo "🧪 Running full test suite..." && go test -v -race -coverprofile=coverage.out ./... && echo "📊 Generating coverage report..." && go tool cover -func=coverage.out | tail -1 | awk "{print \"Overall coverage:\", \$3}"'
        language: system
        files: \.go$
        pass_filenames: false

      # Integration tests with LocalStack check
      - id: integration-ready-check
        name: Integration Test Readiness
        entry: sh -c 'if [ -n "${AWS_ENDPOINT_URL:-}" ]; then echo "🔧 LocalStack detected, running integration tests..."; go test -tags=integration -v ./tests/...; else echo "ℹ️  Integration tests skipped (no LocalStack)"; fi'
        language: system
        files: \.go$
        pass_filenames: false

      # Performance benchmarks (lightweight)
      - id: performance-check
        name: Performance Benchmarks
        entry: sh -c 'echo "⚡ Running performance benchmarks..." && go test -bench=. -benchtime=1s ./... | grep -E "(Benchmark|PASS|FAIL)" || echo "No benchmarks found"'
        language: system
        files: \.go$
        pass_filenames: false

      # Security-focused dependency check
      - id: security-deps-check
        name: Security Dependencies Check
        entry: sh -c 'echo "🔒 Checking for vulnerable dependencies..." && go list -json -deps ./... | jq -r "select(.Module != null) | \"\(.Module.Path)@\(.Module.Version)\"" | sort -u > /tmp/deps.txt && echo "Dependencies checked: $(wc -l < /tmp/deps.txt)"'
        language: system
        files: (go\.mod|go\.sum)$
        pass_filenames: false

  # Documentation checks
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix]
        exclude: ^(CHANGELOG\.md|node_modules/)

  # YAML formatting
  - repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks
    rev: v2.11.0
    hooks:
      - id: pretty-format-yaml
        args: [--autofix, --indent, '2']

  # License and copyright checks
  - repo: local
    hooks:
      - id: license-check
        name: License Check
        entry: sh -c 'find . -name "*.go" -not -path "./vendor/*" | xargs grep -L "Licensed under the Apache License" | head -10 | while read file; do echo "Missing license header: $file"; done; exit 0'
        language: system
        files: \.go$
        pass_filenames: false

# Configuration
default_language_version:
  python: python3

# Exclude patterns
exclude: |
  (?x)^(
    vendor/.*|
    \.git/.*|
    \.gitignore|
    .*\.pb\.go|
    .*_test\.go\.backup
  )$

# Fail fast on first error
fail_fast: true

# Minimum pre-commit version
minimum_pre_commit_version: '3.0.0'